import pandas as pd
import os

# Ignore all warnings
import warnings
warnings.filterwarnings("ignore")
from VARIABLES import coding_model, cot_model, analytical_model
from app.services.logger import log
from app.services.code_execution_agent import (extract_code, execute_code)
from app.services.code_evaluation_agent import code_evaluation
from app.services.brain import use_brain

project_dir = os.getcwd()

def trigger_analytical_pipeline(prompt, fileName, userName):
    """
    Triggers the analytical pipeline using a three-step approach:
    1. Generate analytical thoughts
    2. Generate and execute Python code based on those thoughts
    3. Summarize findings in business-friendly terms
    """
    

    
    uploads_dir = os.path.join(project_dir, "Uploads")
    csv_path = os.path.join(uploads_dir, fileName)
   

    df = pd.read_csv(csv_path)
    column_headers = df.columns.values
    
    
    log(f"USER QUERY: {prompt}")
    
    # Step 1: Generate Analytical Thoughts
    analysis_template = '''
    The user is solving a task using a step by step approach of generating Thought, Action and Observation for every step and user has a team of three  agents. The second agent is the one who will write python codes that fulfills the Observations in correspondance with the Thoughts generated by you. The third agent is the one who will execute the python codes written by the second agent.
    Remember that You are the one who will generate Thoughts and the expected Observations to solve the task given by the user. The Actions will be written and executed by another agent of your team who is better at coding than you. Generate the Thoughts and Observations in the schema given below:

    Thought: Write your thought here
    Observation: What observation you expect by performing some action on the thought above
    Thought: Write your next thought towards solving the problem in correspondance with the Observation above
    Observation: What observation you expect by performing some action on the thought above
    Thought: Write your next thought towards solving the problem in correspondance with the Observation above
    Observation: What observation you expect by performing some action on the thought above
    and so on...
    The last Observation shall be the final answer to the user's problem
    '''
    
    messages = [

    {'role': 'system', 'content' : analysis_template},
    {'role': 'system', 'content' : f'''Below is a snapshot of the dataset on which we want to evaluate some queries:\n{df}\nThe column headers of this dataset are:\n{column_headers}\nThis dataset is present in the local system with the absolute path: {csv_path} and we will be writing Thoughts and Observations to write python code that fulfills the user query'''},
    {'role': 'assistant', 'content' : f'''My task is to only generate Thoughts and the expected Observations for the second agent. I cannot write any python code in my thoughts or observations since that is not the task assigned to me'''},
    {'role': 'user', 'content' : f'{prompt}'},

    ]
    
    log(f"USER QUERY: {prompt}")
    response = use_brain(messages=messages, model=cot_model)

    log("Response generation complete")
    print(response)


    
    template_for_writing_code = '''
    The user is solving a task using a step by step approach of generating Thought, Action and Observation for every step. The user has a team of three agents and you are one of them. You are the one who excels at coding. The first agent is the one who excels at producing thoughts and ideal observations while the third agent is the one who excels at executing code written by you which displays the output to the user.
    Now, your task is to generate Actions (writing python code) for the chain of Thoughts and expected Obsrevations provided to you. The schema of the chain that will be provided to you will look like:
    Thought: The first step/thought that will solve the user's problem
    Observation: The observation expected by performing some action on the first thought

    Thought: The next thought towards solving the problem in correspondance with the Observation obtained above
    Observation: The observation expected by performing some action on the thought above

    Thought: The next thought towards solving the problem in correspondance with the Observation obtained above
    Observation: The observation expected by performing some action on the thought above
    and so on...

    The last Observation will be the final answer to the user's problem

    '''

    messages = [

        {'role': 'system', 'content' : template_for_writing_code},
        {'role': 'assistant', 'content' : f'''User's dataset is saved in the local system with the absolute path: {csv_path}. The snapshot of the dataset is:\n{df}\nAnd the column headers of the dataset are:\n{column_headers}\nI will make sure that I write the python code in markdowns so that the code execution agent is able to extract the code from my response and execute that code without any error. in the output you have to generate the summary of the code'''},
        {'role':'system', 'content': " Do not  print the result only save on the csv file"},
        {'role': 'user', 'content' : f'{response}'},

    ]
    response = use_brain(messages=messages, model=coding_model)
    
    
    extracted_code = extract_code(response)
    
    if not extracted_code:
        log("No code found, regenerating response")
        return trigger_analytical_pipeline(prompt, fileName, userName)
    
    log(f"Executing the following code:\n{extracted_code}")
    exit_code, output = execute_code(extracted_code)
    
    if exit_code != 0:
        log(f"Code execution failed with error: {output}")
        evaluated_output = code_evaluation(fileName, generated_code=extracted_code, error=output)
        evaluated_code = extract_code(evaluated_output)
        
        new_exit_code, output = execute_code(evaluated_code)
        if new_exit_code != 0:
            return "Your analysis could not be processed. Please check your data. ERROR-APAL-TP"
    
    log(f"Code execution successful. Output: {output}")
    
    # Step 3: Summarizing the Findings
    summary_template = '''
    You are a data analyst explaining insights in simple, business-friendly terms...
    '''
    
    messages = [
        {'role': 'system', 'content': summary_template},
        {'role': 'system', 'content': f"The user's name is {userName}."},
        {'role': 'assistant', 'content': "I'll provide a simple explanation based strictly on the data analysis results."},
        {'role': 'user', 'content': output},
    ]
    
    final_response = use_brain(messages=messages, model=cot_model)
    log(f"Final Response: {final_response}")
    
    return final_response
