

import pandas as pd
import os

# ignore all warnings
import warnings
warnings.filterwarnings("ignore")
from VARIABLES import coding_model ,cot_model
from app.services.logger import log
from app.services.code_execution_agent import (extract_code , execute_code)
from app.services.code_evaluation_agent import code_evaluation
from app.services.brain import use_brain
from app.pipelines.smart_query import append_suggestions_to_output

project_dir = os.getcwd()

def get_response(prompt,fileName,userName):
    """
    Fetch response from the LLM

    Args:
        fileName: User's csv file which contains the data.
        prompt: User's prompt for the LLM.
        
    Returns:
        Raw output generated by the LLM
    """

    df = pd.read_csv(f'{project_dir}/Uploads/{fileName}', encoding='utf-8')

    base_system_prompt = """You are Insights AI, A DATA ANALYST who is EXPERT at writing PYTHON CODE for PANDAS DATAFRAMES.
    Solve tasks using your CODING and LANGUAGE skills.

   #Instructions:
    MAKE SURE to CONVERT the COLUMNS PRESENT IN THE DATAFRAME to their CORRESPONDING DATA TYPES. The COLUMNS are NOT CONVERTED to any data types AS OF NOW.
    1. Generate the relevant code by taking a look at the column headers of the dataset user will provide to you.
    2. Suggest PYTHON CODE (in PYTHON CODING BLOCKS: ```python) for the user to EXECUTE.
    
    #Code Requirements:
    - The user cannot provide any other feedback or perform any other action beyond executing the code you suggest.
    - The user can't modify your code. So do not suggest incomplete code which requires modification.
    - DO NOT INCLUDE MULTIPLE CODE BLOCKS IN ONE RESPONSE. 
    - Do not ask users to copy and paste anything. Instead, use 'print' function when relevant.
    - Suggest the full code instead of partial code or code changes.
    - Remember that you are working with CSV Data and these type of data requires first argument to be string or compiled patterns, So while writing python code, make sure you perform correct data type Conversion.
    - MAKE SURE TO PICK THE COLUMN HEADERS AS IT IS FROM THE DATAFRAME to avoid errors related to column name ambiguity.
    - DO NOT REPLACE ANY VARIABLES GIVEN BY THE USER ON YOUR OWN. Assume that whatever variable user has provided is present in the dataset.
    - MAKE SURE TO WRITE THE PYTHON CODE IN PYTHON CODING BLOCKS: ```python


    #Response Format Requirements:
    - THE PRINT STATEMENT SHOULD EXPLAIN THE ANSWER thoroughly in response to the question asked.
    - NEVER RETURN JUST ONE LINE OF OUTPUT. Always structure the answer with clear sections and multiple lines.
    - Start with a clear summary of findings (1-2 sentences)
    - Provide specific numerical values and statistics that directly answer the question
    - Include additional context or related insights that enrich the answer
    -WHEN ANSWERING QUERIES, PROVIDE APPROPRIATELY DETAILED RESPONSES THAT INCLUDE SPECIFIC NUMBERS AND CONTEXT. FOR EXAMPLE, IF ASKED ABOUT PROFIT, DON\'T JUST SAY "THE MOST PROFITABLE CITY IS X" BUT RATHER "THE MOST PROFITABLE CITY IS X WITH $Y IN TOTAL PROFITS.
    -INCLUDE RELEVANT CONTEXT AND SUPPORTING DETAILS IN YOUR RESPONSES, WHILE KEEPING THE OUTPUT CONCISE AND FOCUSED ON THE USER\'S QUESTION. WHEN SHOWING RESULTS, INCLUDE THE ACTUAL VALUES IN THE PRINT STATEMENTS, NOT JUST NAMES OR CATEGORIES


    #Special Situations:
    - IF THE USER ASKS QUESTIONS THAT ARE NOT RELEVANT WITH THE DATA, GENTLY DENY ANSWERING THE QUESTION BY SAYING SOMETHING LIKE "I CANNOT HELP YOU WITH THAT REQUEST". THE PYTHON CODE SHOULD ONLY CONTAIN THE PRINT STATEMENT WHILE RESTRICTING CSV READING IN THIS CASE.
    - IF THE USER ASKS GENERAL QUESTIONS LIKE "HI," "HELLO," OR INQUIRIES ABOUT THE FUNCTIONALITY YOU PROVIDE, GENTLY RESPOND IN THE PRINT STATEMENT OF THE PYTHON CODE YOU GENERATE, WHILE RESTRICTING CSV READING IN THIS CASE.
    - OTHER FUNCTIONALITIES YOU CAN PERFORM WITH OTHER PIPELINES INCLUDE: SUMMARIZATION, ALL TYPES OF GRAPH GENERATION, TABLE GENERATION, REGRESSION, FORECASTING, SEGMENTATION, CLUSTERING, AND PROFILING.
    
    
 

    """
    
    messages = [
    {"role": "system", "content": base_system_prompt},
    # {"role": "system","content": f"The user's name is {userName}. Please incorporate the user's name into your explanations where appropriate to create a more personalized and engaging response."},
    {"role": "assistant", "content": f'''take a look at the glimpse of a dataset:\n{df.columns.values}\nThe complete dataset is saved in the users system with the path "Uploads/{fileName}". Now generate code for the user prompt'''},
    {"role": "user", "content": prompt}
    ]

    log(f"USER QUERY: {prompt}")

    response = use_brain(messages=messages , model=coding_model)
    
    log("\033[92mResponse generation complete\033[0m")
    
    # RETURN OLLAMA RESPONSE
    return response




def trigger_generic_pipeline(prompt, fileName, userName):
    """
    Triggers the generic pipeline to write and execute python code for misc queries.

    Args:
        csv_file: User's csv file which contains the data.
        prompt: User's prompt for the LLM.
        
    Returns:
        Output generated by the execution of code generated by the LLM.
    """

    # get initial response from the LLM:
    initial_response = get_response(prompt, fileName, userName)
    log(f'Initial Response: {initial_response}')

    code = extract_code(initial_response)
    
    # record the exit code by execution of code and code's output
    exit_code, initial_output = execute_code(code=code)

    # check if the code execution was successfull or not
    if exit_code == 0: #code execution was successful
        log(f'First code generation successful. Initial code generation output: {initial_output}')

        # Add query suggestions to the output
        enhanced_output = append_suggestions_to_output(initial_output)
        
        return(f'{initial_output}{enhanced_output}')
        
    elif initial_output == "NO CODE FOUND":
        log(f'No code found, cant re-evaluate. Regenarating the Initial code')
        return trigger_generic_pipeline(prompt, fileName, userName)

    else: # code execution was not successfull. start code re evaluation now
        log("An error occurred while executing the code. Code is being sent back to the LLM for re-evaluation.")

        evaluated_output = code_evaluation(fileName, generated_code=code, error=initial_output)
        evaluated_code = extract_code(evaluated_output)
        
        # execute the newly generated code 
        new_exit_code, new_code_output = execute_code(evaluated_code)

        log(f"New exit code is {new_exit_code}. New code output: {new_code_output}")

        if new_exit_code == 0: #code execution was successful
            # Add query suggestions to the successful output
            enhanced_output = append_suggestions_to_output(new_code_output)
            return(f'{initial_output}{enhanced_output}')

        else:
            return "Your output could not be processed, please try again later. ERROR-GPPY-TGP"