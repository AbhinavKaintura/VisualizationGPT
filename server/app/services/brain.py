# import OpenAI
from typing import Optional
import json
import requests
from openai import OpenAI

# ignore all warnings
import warnings
warnings.filterwarnings("ignore")

from app.services.logger import log

# importing openai api key
from VARIABLES import api_key, openai_model, ollama_endpoints_url 

def use_brain(
    messages: Optional[list] = None,
    model: Optional[str] = "llama3:8b-instruct-fp16",
    respond_in_json:Optional[bool] = False
    ):
    """
    Call the LLM to fetch a response. 

    Args:
        messages (required) : list of messages that will be sent to the LLM. Includes the system prompts and user prompts.
        model: Optional[str] = "llama3:8b-instruct-fp16" : model that will be used to generate the response
        the query will be sent to analytical performance model
        respond_in_json:Optional[bool] = False : if the attribute respond_in_json is true, the response will be returned in json

    Return:
        Response generated by the LLM
    """
    from VARIABLES import model_inference
    inference = model_inference

    log(f"Model inference loaded: {inference}")

    if messages == None:
        log('Internal comms error. Please make sure that you are providing valid "messages" to the agent. ERROR-BPY-UB')
        return 'Internal comms error. Please make sure that you are providing valid "messages" to the agent. ERROR-BPY-UB'

    # fetch response from openai
    if inference == "openai":
        client = OpenAI(api_key=api_key)
        response = client.chat.completions.create(
        model=openai_model,
        messages=messages
        )
        log(f"Returning response received from OpenAI")
        return (response.choices[0].message.content)

    if inference == "ollama_url":
        if respond_in_json:
            payload = {
                "model": model,
                "messages": messages,
                "stream":False,
                "format": "json",
                "options":{
                    "num_ctx":1024*4
                }
            }
        else:
            payload = {
                "model": model,
                "messages": messages,
                "stream":False,
                "options":{
                    "num_ctx":1024*4
                }
            }

        # Convert payload to JSON format
        payload_json = json.dumps(payload)
        # Send POST request
        log(f"Sending the prepared payload to the target machine: {ollama_endpoints_url}")
        response = requests.post(url=ollama_endpoints_url, data=payload_json)
        if response.status_code == 200:
            log(f'Response received with code 200 | OK')
            try:
                generated_output = (response.content.decode('utf-8'))
                if generated_output is not None:
                    # Parse the JSON response
                    response_json = json.loads(generated_output)
                    
                    # fetch the required response text from the complete JSON
                    response  = response_json.get("message", {}).get("content")
                    
                    try:
                        # Extract the values of total_duration and load_duration and log them
                        total_duration = response_json['total_duration']
                        load_duration = response_json['load_duration']
                        log(response)
                        log(f"Model Used for generating response : {model}")
                        log(f"Total duration of generating response : {total_duration/1000000000} seconds")
                        log(f"Load duration taken by Ollama : {load_duration/1000000000} seconds")
                    except:
                        log("Response generation details could not be extracted. This occurs when you request the requested response to be in JSON outputs, returning plain response now")
                    
                    return response
            except Exception as e:
                log("There was an error in extracting the response from the JSON received by the machine. ERROR-BPY-UB")
        else:
            log(f"Error in receiving response from the target machine: {response.status_code}, {response.text}. ERROR-BPY-UB")